{"ast":null,"code":"var _jsxFileName = \"/Users/ronan/Flatiron/code/Mod5/Final-Project/Github/early-learning-frontend/src/Speaking.js\";\nimport React from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport ConfettiWin from './ConfettiWin';\nimport { Button } from 'react-bootstrap';\n\nconst Speaking = props => {\n  const {\n    transcript,\n    resetTranscript\n  } = useSpeechRecognition();\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null;\n  }\n\n  const reading = transcript;\n  const text = \"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\";\n\n  if (props.abcEnd) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"abc-result\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, \"You got \", (props.abcRight.length / 26 * 100).toFixed(2), \"%\"), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, \"You missed \", props.abcWrong.map(letter => /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 58\n      }\n    }, letter))), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-info\",\n      onClick: () => {\n        props.history.push(``);\n        props.endAbc();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }, \"Return Home\"), props.abcRight.length === 26 ? /*#__PURE__*/React.createElement(ConfettiWin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 44\n      }\n    }) : null);\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"alphabet\",\n      src: \"https://www.english-learn-online.com/wp-content/uploads/alphabet-featured-1230x660-696x373.jpg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-success\",\n      className: \"speech-controls\",\n      onClick: () => SpeechRecognition.startListening({\n        continuous: true\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, \"Start\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"speech-controls\",\n      onClick: SpeechRecognition.stopListening,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, \"Stop\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"speech-controls\",\n      onClick: resetTranscript,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-dark\",\n      className: \"speech-controls\",\n      onClick: () => props.evaluate(text, reading),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, reading));\n  }\n};\n\nexport default Speaking;","map":{"version":3,"sources":["/Users/ronan/Flatiron/code/Mod5/Final-Project/Github/early-learning-frontend/src/Speaking.js"],"names":["React","SpeechRecognition","useSpeechRecognition","ConfettiWin","Button","Speaking","props","transcript","resetTranscript","browserSupportsSpeechRecognition","reading","text","abcEnd","abcRight","length","toFixed","abcWrong","map","letter","history","push","endAbc","startListening","continuous","stopListening","evaluate"],"mappings":"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","sourcesContent":["import React from 'react'\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\nimport ConfettiWin from './ConfettiWin'\nimport { Button } from 'react-bootstrap'\n\nconst Speaking = (props) => {\n  const { transcript, resetTranscript } = useSpeechRecognition()\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null\n  }\n  const reading = transcript\n  const text = \"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\"\n\n  if(props.abcEnd){\n      return (\n          <>\n            <h1 className=\"abc-result\">You got {((props.abcRight.length/26)*100).toFixed(2)}%</h1>\n            <h1>You missed {props.abcWrong.map(letter => <h3>{letter}</h3>)}</h1>\n            <Button variant=\"outline-info\" onClick={()=>{props.history.push(``); props.endAbc();}}>Return Home</Button>\n            {props.abcRight.length === 26? <ConfettiWin /> : null}\n          </>\n      )\n  } else {\n      return (\n        <div>\n            <img className=\"alphabet\" src=\"https://www.english-learn-online.com/wp-content/uploads/alphabet-featured-1230x660-696x373.jpg\" />\n            <br></br>\n            <Button variant=\"outline-success\" className=\"speech-controls\" onClick={() => SpeechRecognition.startListening({ continuous:true })}>Start</Button>\n            <Button variant=\"outline-danger\" className=\"speech-controls\" onClick={SpeechRecognition.stopListening}>Stop</Button>\n            <Button variant=\"outline-warning\" className=\"speech-controls\" onClick={resetTranscript}>Reset</Button>\n            <Button variant=\"outline-dark\" className=\"speech-controls\" onClick={() => props.evaluate(text,reading)}>Submit</Button>\n    \n            <h1>{reading}</h1>\n        </div>\n      )\n  }\n\n}\nexport default Speaking"]},"metadata":{},"sourceType":"module"}