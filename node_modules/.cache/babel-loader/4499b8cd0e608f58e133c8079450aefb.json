{"ast":null,"code":"var _jsxFileName = \"/Users/ronan/Flatiron/code/Mod5/Final-Project/early-learning-frontend/src/MultipleChoice.js\";\nimport React from 'react';\nconst API = 'http://localhost:3000/api/v1/questions';\n\nclass MultipleChoice extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      currentIndex: 0,\n      options: [],\n      quizEnd: false,\n      score: 0,\n      disabled: true\n    };\n\n    this.nextQuestionHandler = () => {\n      const {\n        userAnswer,\n        answer,\n        score\n      } = this.state;\n\n      if (userAnswer === answer) {\n        this.setState({\n          score: score + 1\n        });\n      }\n\n      this.setState({\n        currentIndex: this.state.currentIndex + 1,\n        userAnswer: null\n      });\n    };\n\n    this.checkAnswer = answer => {\n      this.setState({\n        userAnswer: answer,\n        disabled: false\n      });\n    };\n\n    this.finishHandler = () => {\n      const {\n        userAnswer,\n        answer,\n        score\n      } = this.state;\n\n      if (userAnswer === answer) {\n        this.setState({\n          score: score + 1\n        });\n      }\n\n      if (this.state.currentIndex === questions.length - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      currentIndex\n    } = this.state;\n    fetch(API).then(resp => resp.json()).then(questions => {\n      this.setState({\n        question: questions[currentIndex].question,\n        options: questions[currentIndex].options,\n        answer: questions[currentIndex].answer\n      });\n    });\n  } // loadQuiz = () => {\n  //     const {currentIndex} = this.state\n  //     this.setState(() => {\n  //         return {\n  //             question: QuestionData[currentIndex].question,\n  //             options: QuestionData[currentIndex].options,\n  //             answer: QuestionData[currentIndex].answer\n  //         }\n  //     })\n  // }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentIndex != prevState.currentIndex) {\n      this.setState(() => {\n        return {\n          question: questions[this.state.currentIndex].question,\n          options: questions[this.state.currentIndex].options,\n          answer: questions[this.state.currentIndex].answer\n        };\n      });\n    }\n  }\n\n  render() {\n    const {\n      question,\n      options,\n      currentIndex,\n      userAnswer,\n      quizEnd,\n      score\n    } = this.state;\n\n    if (quizEnd) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }\n      }, \"You answered \", score, \" out of \", questions.length, \" correct\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, question), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, `Question ${currentIndex + 1} of ${questions.length}`), options.map(option => /*#__PURE__*/React.createElement(\"p\", {\n        key: option.id,\n        className: `options ${userAnswer === option ? \"selected\" : null}`,\n        onClick: () => this.checkAnswer(option),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: option,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 33\n        }\n      }))), currentIndex < questions.length - 1 && /*#__PURE__*/React.createElement(\"button\", {\n        disabled: this.state.disabled,\n        onClick: this.nextQuestionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }\n      }, \"Next Question\"), currentIndex === questions.length - 1 && /*#__PURE__*/React.createElement(\"button\", {\n        disabled: this.state.disabled,\n        onClick: this.finishHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }\n      }, \"Submit\"));\n    }\n  }\n\n}\n\nexport default MultipleChoice; // render() {\n//     console.log(this.state)\n//     return(\n//         <>\n//             <h1>Multple Choice</h1>\n//             <div>\n//                 {this.state.questions.map(question => <QuestionCard key={question.id} {...question} />)}\n//             </div>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/ronan/Flatiron/code/Mod5/Final-Project/early-learning-frontend/src/MultipleChoice.js"],"names":["React","API","MultipleChoice","Component","state","userAnswer","currentIndex","options","quizEnd","score","disabled","nextQuestionHandler","answer","setState","checkAnswer","finishHandler","questions","length","componentDidMount","fetch","then","resp","json","question","componentDidUpdate","prevProps","prevState","render","map","option","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAG,wCAAZ;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAAA;AAAA;AAAA,SAEzCC,KAFyC,GAEjC;AACJC,MAAAA,UAAU,EAAE,IADR;AAEJC,MAAAA,YAAY,EAAE,CAFV;AAGJC,MAAAA,OAAO,EAAE,EAHL;AAIJC,MAAAA,OAAO,EAAE,KAJL;AAKJC,MAAAA,KAAK,EAAE,CALH;AAMJC,MAAAA,QAAQ,EAAE;AANN,KAFiC;;AAAA,SAkCzCC,mBAlCyC,GAkCnB,MAAM;AACxB,YAAM;AAACN,QAAAA,UAAD;AAAaO,QAAAA,MAAb;AAAqBH,QAAAA;AAArB,UAA8B,KAAKL,KAAzC;;AAEA,UAAGC,UAAU,KAAKO,MAAlB,EAAyB;AACrB,aAAKC,QAAL,CAAe;AACXJ,UAAAA,KAAK,EAAEA,KAAK,GAAG;AADJ,SAAf;AAGH;;AAED,WAAKI,QAAL,CAAc;AACVP,QAAAA,YAAY,EAAE,KAAKF,KAAL,CAAWE,YAAX,GAA0B,CAD9B;AAEVD,QAAAA,UAAU,EAAE;AAFF,OAAd;AAIH,KA/CwC;;AAAA,SAqDzCS,WArDyC,GAqD3BF,MAAM,IAAI;AACpB,WAAKC,QAAL,CAAc;AACVR,QAAAA,UAAU,EAAEO,MADF;AAEVF,QAAAA,QAAQ,EAAE;AAFA,OAAd;AAIH,KA1DwC;;AAAA,SAwEzCK,aAxEyC,GAwEzB,MAAM;AAClB,YAAM;AAACV,QAAAA,UAAD;AAAaO,QAAAA,MAAb;AAAqBH,QAAAA;AAArB,UAA8B,KAAKL,KAAzC;;AAEA,UAAGC,UAAU,KAAKO,MAAlB,EAAyB;AACrB,aAAKC,QAAL,CAAe;AACXJ,UAAAA,KAAK,EAAEA,KAAK,GAAG;AADJ,SAAf;AAGH;;AAED,UAAG,KAAKL,KAAL,CAAWE,YAAX,KAA4BU,SAAS,CAACC,MAAV,GAAmB,CAAlD,EAAoD;AAChD,aAAKJ,QAAL,CAAc;AACVL,UAAAA,OAAO,EAAC;AADE,SAAd;AAGH;AACJ,KAtFwC;AAAA;;AAWzCU,EAAAA,iBAAiB,GAAE;AACf,UAAM;AAACZ,MAAAA;AAAD,QAAiB,KAAKF,KAA5B;AACAe,IAAAA,KAAK,CAAClB,GAAD,CAAL,CACCmB,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMJ,SAAS,IAAI;AACjB,WAAKH,QAAL,CAAc;AACVU,QAAAA,QAAQ,EAAEP,SAAS,CAACV,YAAD,CAAT,CAAwBiB,QADxB;AAEVhB,QAAAA,OAAO,EAAES,SAAS,CAACV,YAAD,CAAT,CAAwBC,OAFvB;AAGVK,QAAAA,MAAM,EAAEI,SAAS,CAACV,YAAD,CAAT,CAAwBM;AAHtB,OAAd;AAKD,KARD;AASH,GAtBwC,CAuBzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA4BAY,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACpC,QAAG,KAAKtB,KAAL,CAAWE,YAAX,IAA2BoB,SAAS,CAACpB,YAAxC,EAAqD;AACjD,WAAKO,QAAL,CAAc,MAAM;AAChB,eAAO;AACHU,UAAAA,QAAQ,EAAEP,SAAS,CAAC,KAAKZ,KAAL,CAAWE,YAAZ,CAAT,CAAmCiB,QAD1C;AAEHhB,UAAAA,OAAO,EAAES,SAAS,CAAC,KAAKZ,KAAL,CAAWE,YAAZ,CAAT,CAAmCC,OAFzC;AAGHK,UAAAA,MAAM,EAAEI,SAAS,CAAC,KAAKZ,KAAL,CAAWE,YAAZ,CAAT,CAAmCM;AAHxC,SAAP;AAKH,OAND;AAOH;AACJ;;AAkBDe,EAAAA,MAAM,GAAG;AACL,UAAM;AAACJ,MAAAA,QAAD;AAAWhB,MAAAA,OAAX;AAAoBD,MAAAA,YAApB;AAAkCD,MAAAA,UAAlC;AAA8CG,MAAAA,OAA9C;AAAuDC,MAAAA;AAAvD,QAAgE,KAAKL,KAA3E;;AACA,QAAGI,OAAH,EAAY;AACR,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkBC,KAAlB,cAAiCO,SAAS,CAACC,MAA3C,aADJ,CADJ;AAKH,KAND,MAMO;AACH,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKM,QAAL,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ,YAAWjB,YAAY,GAAG,CAAE,OAAMU,SAAS,CAACC,MAAO,EAA3D,CAFJ,EAIQV,OAAO,CAACqB,GAAR,CAAYC,MAAM,iBACd;AAAG,QAAA,GAAG,EAAIA,MAAM,CAACC,EAAjB;AAAqB,QAAA,SAAS,EAAG,WAAUzB,UAAU,KAAKwB,MAAf,GAAuB,UAAvB,GAAmC,IAAK,EAAnF;AACA,QAAA,OAAO,EAAI,MAAM,KAAKf,WAAL,CAAiBe,MAAjB,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,CAJR,EAYKvB,YAAY,GAAGU,SAAS,CAACC,MAAV,GAAmB,CAAlC,iBACD;AAAQ,QAAA,QAAQ,EAAI,KAAKb,KAAL,CAAWM,QAA/B;AAAyC,QAAA,OAAO,EAAE,KAAKC,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAbJ,EAgBKL,YAAY,KAAKU,SAAS,CAACC,MAAV,GAAmB,CAApC,iBACD;AAAQ,QAAA,QAAQ,EAAI,KAAKb,KAAL,CAAWM,QAA/B;AAAyC,QAAA,OAAO,EAAE,KAAKK,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjBJ,CADJ;AAwBH;AACJ;;AA1HwC;;AA6H7C,eAAeb,cAAf,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\n\nconst API = 'http://localhost:3000/api/v1/questions'\n\nclass MultipleChoice extends React.Component {\n\n    state = {\n        userAnswer: null,\n        currentIndex: 0,\n        options: [],\n        quizEnd: false,\n        score: 0,\n        disabled: true\n    }\n\n    componentDidMount(){\n        const {currentIndex} = this.state\n        fetch(API)\n        .then(resp => resp.json())\n        .then(questions => {\n          this.setState({\n              question: questions[currentIndex].question,\n              options: questions[currentIndex].options,\n              answer: questions[currentIndex].answer\n          })\n        })\n    }\n    // loadQuiz = () => {\n    //     const {currentIndex} = this.state\n    //     this.setState(() => {\n    //         return {\n    //             question: QuestionData[currentIndex].question,\n    //             options: QuestionData[currentIndex].options,\n    //             answer: QuestionData[currentIndex].answer\n    //         }\n    //     })\n    // }\n    \n    nextQuestionHandler = () => {\n        const {userAnswer, answer, score} = this.state\n    \n        if(userAnswer === answer){\n            this.setState ({\n                score: score + 1\n            })\n        }\n    \n        this.setState({\n            currentIndex: this.state.currentIndex + 1,\n            userAnswer: null\n        })\n    }\n    \n    // componentDidMount() {\n    //     this.loadQuiz()\n    // }\n    \n    checkAnswer = answer => {\n        this.setState({\n            userAnswer: answer,\n            disabled: false\n        })\n    }\n    \n    componentDidUpdate(prevProps, prevState){\n        if(this.state.currentIndex != prevState.currentIndex){\n            this.setState(() => {\n                return {\n                    question: questions[this.state.currentIndex].question,\n                    options: questions[this.state.currentIndex].options,\n                    answer: questions[this.state.currentIndex].answer\n                }\n            })\n        }\n    }\n    \n    finishHandler = () => {\n        const {userAnswer, answer, score} = this.state\n        \n        if(userAnswer === answer){\n            this.setState ({\n                score: score + 1\n            })\n        }\n    \n        if(this.state.currentIndex === questions.length - 1){\n            this.setState({\n                quizEnd:true\n            })\n        }\n    }\n    \n    render() {\n        const {question, options, currentIndex, userAnswer, quizEnd, score} = this.state\n        if(quizEnd) {\n            return (\n                <div>\n                    <h2>You answered {score} out of {questions.length} correct</h2>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <h2>{question}</h2>\n                    <span>{`Question ${currentIndex + 1} of ${questions.length}`}</span>\n                    {\n                        options.map(option => \n                            <p key = {option.id} className={`options ${userAnswer === option? \"selected\": null}`}\n                            onClick = {() => this.checkAnswer(option)}>\n                                <img src={option} />\n                            </p>\n                        )\n                    }\n    \n                    {currentIndex < questions.length - 1 &&\n                    <button disabled = {this.state.disabled} onClick={this.nextQuestionHandler}>\n                        Next Question\n                    </button>}\n                    {currentIndex === questions.length - 1 && \n                    <button disabled = {this.state.disabled} onClick={this.finishHandler}>\n                        Submit\n                    </button>\n                }\n                </div> \n            );\n        }\n    }\n}\n\nexport default MultipleChoice\n\n\n\n\n\n\n// render() {\n//     console.log(this.state)\n//     return(\n//         <>\n//             <h1>Multple Choice</h1>\n//             <div>\n//                 {this.state.questions.map(question => <QuestionCard key={question.id} {...question} />)}\n//             </div>\n//         </>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}